// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  phoneNumber     Int      @unique
  balance         Float    @default(0)
  pendentBalance  Float    @default(0)
  password        String
  termsAccepted   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notifications   Notification[]
  
  // Replace direct plan relationship with subscription
  subscription    Subscription?

  @@map("users")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Plan {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float
  period          String    // "semanal" or "mensal"
  returns         Float
  dailyReturnMZN  Float
  iconName        String    // Store the icon name

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  subscriptions   Subscription[]
  benefits        PlanBenefit[]

  @@map("plans")
}

// New Subscription model
model Subscription {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate       DateTime  @default(now())

  endDate         DateTime
  status          SubscriptionStatus @default(ACTIVE)
  
  autoRenew       Boolean   @default(false)
  
  // Relationships
  userId          String    @unique @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  
  planId          String    @db.ObjectId
  plan            Plan      @relation(fields: [planId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

model Benefit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationship
  plans       PlanBenefit[]

  @@map("benefits")
}

model PlanBenefit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  planId      String   @db.ObjectId
  benefitId   String   @db.ObjectId
  
  plan        Plan     @relation(fields: [planId], references: [id])
  benefit     Benefit  @relation(fields: [benefitId], references: [id])

  @@unique([planId, benefitId])
  @@map("plan_benefits")
}
